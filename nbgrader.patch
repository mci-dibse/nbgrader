diff --git a/nbgrader/exchange/exchange.py b/nbgrader/exchange/exchange.py
index 1156c11e..f68c1c6e 100644
--- a/nbgrader/exchange/exchange.py
+++ b/nbgrader/exchange/exchange.py
@@ -23,7 +23,7 @@ class ExchangeError(Exception):
 class Exchange(LoggingConfigurable):
 
     assignment_dir = Unicode(
-        ".",
+        "/home/jovyan/work",
         help=dedent(
             """
             Local path for storing student assignments.  Defaults to '.'
@@ -57,7 +57,7 @@ class Exchange(LoggingConfigurable):
         return os.path.join(jupyter_data_dir(), 'nbgrader_cache')
 
     path_includes_course = Bool(
-        False,
+        True,
         help=dedent(
             """
             Whether the path for fetching/submitting  assignments should be
diff --git a/nbgrader/exchange/submit.py b/nbgrader/exchange/submit.py
index 26593cd9..2d6d6cb5 100644
--- a/nbgrader/exchange/submit.py
+++ b/nbgrader/exchange/submit.py
@@ -1,5 +1,11 @@
-import base64
 import os
+import shutil
+import logging
+from zeep import Client
+import time
+import base64
+import xml.etree.ElementTree as ET
+
 from stat import (
     S_IRUSR, S_IWUSR, S_IXUSR,
     S_IRGRP, S_IWGRP, S_IXGRP,
@@ -30,6 +36,20 @@ class ExchangeSubmit(Exchange):
         )
     ).tag(config=True)
 
+    def getLogger(self):
+        # logger.getLogger returns the cached logger when called multiple times
+        # logger.Logger created a new one every time and that avoids adding
+        # duplicate handlers
+        logger = logging.getLogger(__name__)
+        if not logger.handlers:
+            logger.setLevel(logging.DEBUG)
+            f_handler = logging.FileHandler(os.path.join('/srv/nbgrader/exchange/', self.coursedir.course_id  + '/inbound/nbgrader_submit.log'), 'a')
+            f_handler.setLevel(logging.DEBUG)
+            f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
+            f_handler.setFormatter(f_format)
+            logger.addHandler(f_handler)
+        return logger
+        
     def init_src(self):
         if self.path_includes_course:
             root = os.path.join(self.coursedir.course_id, self.coursedir.assignment_id)
@@ -135,8 +155,9 @@ class ExchangeSubmit(Exchange):
         else:
             cache_path = os.path.join(self.cache_path, self.assignment_filename)
 
-        self.log.info("Source: {}".format(self.src_path))
-        self.log.info("Destination: {}".format(dest_path))
+        logger = self.getLogger()
+        logger.info("Source: %s", self.src_path)
+        logger.info("Destination: %s", dest_path)
 
         # copy to the real location
         self.check_filename_diff()
@@ -148,6 +169,10 @@ class ExchangeSubmit(Exchange):
             fileperms=(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH),
             dirperms=(S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH))
 
+        if self.create_sakai_submission(dest_path) != 0:
+            shutil.rmtree(dest_path, ignore_errors=True)
+            self.fail("Cannot establish connection to Sakai. Submission was not successful.")
+
         # Make this 0777=ugo=rwx so the instructor can delete later. Hidden from other users by the timestamp.
         os.chmod(
             dest_path,
@@ -161,6 +186,50 @@ class ExchangeSubmit(Exchange):
         with open(os.path.join(cache_path, "timestamp.txt"), "w") as fh:
             fh.write(self.timestamp)
 
-        self.log.info("Submitted as: {} {} {}".format(
-            self.coursedir.course_id, self.coursedir.assignment_id, str(self.timestamp)
-        ))
+        logger.info("Submitted as: %s %s %s", self.coursedir.course_id, self.coursedir.assignment_id, str(self.timestamp))
+
+    def create_sakai_submission(self, dest_path):
+        base_url='https://sakai-dev.mci.edu'
+        login_url = base_url + "/sakai-ws/soap/login?wsdl"
+        script_url = base_url + "/sakai-ws/soap/sakai?wsdl"
+        soap_url='/sakai-ws/soap'
+        assignment_url = base_url + soap_url + "/assignments?wsdl"
+        logger = self.getLogger()
+        #https://sakai.mci4me.at/sakai-ws/soap/login?wsdl
+        try:
+            logger.info("%s", base_url)
+            logger.info("%s", login_url)
+            login_proxy = Client(login_url)
+        except Exception as e:
+            logger.info("Cannot establish connection to webservice: %s", e)
+            return -1
+
+        try:
+            session_id = login_proxy.service.login(id='dd1337', pw='jDsG6Cy4wwWcZ4yZ9ZAA4uh')
+            service_proxy = Client(assignment_url)
+            course = os.environ['CONTEXT_ID']
+            body = service_proxy.service.getAssignmentsForContext(session_id, course)
+            root = ET.fromstring(body)
+            for child in root:
+                if child.attrib['title'] == self.coursedir.assignment_id:
+                    assignment_id = child.attrib['id']
+            user_id = os.environ['JUPYTERHUB_USER']
+
+            submission_time = str(int(time.time() * 1000))
+            attachment_name = user_id + "_" + self.coursedir.assignment_id + "_" + submission_time
+            attachment_mime_type = "application/x-zip-compressed"
+            zip_ret = shutil.make_archive(attachment_name, 'zip', dest_path)
+            with open(zip_ret, 'rb') as file_in:
+                bytes = file_in.read()
+                encoded_string = base64.b64encode(bytes)
+
+            os.remove(zip_ret)
+
+            logger.info("Webservice call: %s, %s, %s, %s, %s, %s", session_id, course, assignment_id, user_id, submission_time, attachment_name)
+            ret_val = service_proxy.service.createJupyterSubmission(session_id, course, assignment_id, user_id, submission_time, attachment_name, attachment_mime_type, encoded_string)
+            login_proxy.service.logout(session_id)
+            return 0
+        except Exception as e:
+            logger.info("Exception while sending data to Sakai: %s", e)
+            login_proxy.service.logout(session_id)
+            return -1
diff --git a/nbgrader/nbextensions/assignment_list/assignment_list.js b/nbgrader/nbextensions/assignment_list/assignment_list.js
index b35cbb39..d0794a8d 100644
--- a/nbgrader/nbextensions/assignment_list/assignment_list.js
+++ b/nbgrader/nbextensions/assignment_list/assignment_list.js
@@ -641,9 +641,11 @@ define([
 
             } else if (data.failed !== undefined) {
                 for (var i=0; i<data.failed.length; i++) {
-                    body.append($('<div/>').append($('<p/>').text('The following cell failed:')));
-                    body.append($('<pre/>').text(data.failed[i].source));
-                    body.append($('<pre/>').html(data.failed[i].error));
+                    if (!data.failed[i].hide_input) {
+                        body.append($('<div/>').append($('<p/>').text('The following cell failed:')));
+                        body.append($('<pre/>').text(data.failed[i].source));
+                    }
+                    body.append($('<pre class="failed_message"/>').html(data.failed[i].error));
                 }
                 body.addClass("validation-failed");
                 this.validate_failure(button);
diff --git a/nbgrader/nbextensions/course_list/main.js b/nbgrader/nbextensions/course_list/main.js
index 5e8af4d4..fe624ce0 100644
--- a/nbgrader/nbextensions/course_list/main.js
+++ b/nbgrader/nbextensions/course_list/main.js
@@ -13,7 +13,7 @@ define([
     // xsrf token in the header data
 
     var course_html = $([
-        '<div id="courses" class="tab-pane">',
+        '<div id="courses" class="courses-tab-link">',
         '  <div class="alert alert-danger version_error">',
         '  </div>',
         '  <div class="panel-group">',
diff --git a/nbgrader/nbextensions/validate_assignment/main.js b/nbgrader/nbextensions/validate_assignment/main.js
index 86b8ca2b..99cb170e 100644
--- a/nbgrader/nbextensions/validate_assignment/main.js
+++ b/nbgrader/nbextensions/validate_assignment/main.js
@@ -107,11 +107,11 @@ define([
                 body.addClass("validation-passed");
 
             } else if (data.failed !== undefined) {
-                for (var i=0; i<data.failed.length; i++) {
-                    body.append($('<div/>').append($('<p/>').text('The following cell failed:')));
-                    body.append($('<pre/>').text(data.failed[i].source));
-                    body.append($('<pre/>').html(data.failed[i].error));
-                }
+                    if (!data.failed[i].hide_input) {
+                        body.append($('<div/>').append($('<p/>').text('The following cell failed:')));
+                        body.append($('<pre/>').text(data.failed[i].source));
+                    }
+                    body.append($('<pre class="failed_message"/>').html(data.failed[i].error));
                 body.addClass("validation-failed");
 
             } else {
@@ -139,4 +139,4 @@ define([
     return {
         'load_ipython_extension': load_extension
     };
-});
\ No newline at end of file
+});
diff --git a/nbgrader/preprocessors/saveautogrades.py b/nbgrader/preprocessors/saveautogrades.py
index 012d4e7a..e95b5891 100644
--- a/nbgrader/preprocessors/saveautogrades.py
+++ b/nbgrader/preprocessors/saveautogrades.py
@@ -40,6 +40,10 @@ class SaveAutoGrades(NbGraderPreprocessor):
 
         # determine what the grade is
         auto_score, _ = utils.determine_grade(cell, self.log)
+        # To be able to have autograding tests with zero max points we return -1 in case such a test fails
+        # Therefore we need to correct any negative points here
+        if auto_score < 0:
+            auto_score = 0
         grade.auto_score = auto_score
 
         # if there was previously a manual grade, or if there is no autograder
diff --git a/nbgrader/server_extensions/formgrader/templates/feedback.tpl b/nbgrader/server_extensions/formgrader/templates/feedback.tpl
index f28c54e5..aa768f01 100644
--- a/nbgrader/server_extensions/formgrader/templates/feedback.tpl
+++ b/nbgrader/server_extensions/formgrader/templates/feedback.tpl
@@ -119,17 +119,17 @@ span.nbgrader-label {
         <div id="toc">
           <ol>
           {% for cell in nb.cells %}
-            {% if cell.metadata.nbgrader and cell.metadata.nbgrader.grade and not cell.metadata.nbgrader.solution %}
-            <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Test cell</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
-            {% elif cell.cell_type == "code" and cell.metadata.nbgrader and cell.metadata.nbgrader.grade %}
-            <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Coding free-response</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
-            {% elif cell.cell_type == "markdown" and cell.metadata.nbgrader and cell.metadata.nbgrader.grade %}
-            <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Written response</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
-            {% elif cell.cell_type == "markdown" and cell.metadata.nbgrader and cell.metadata.nbgrader.task %}
-            <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Task</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
-            {% endif %}
-            {% if cell.metadata.nbgrader and cell.metadata.nbgrader.comment and cell.metadata.nbgrader.comment %}
-            <li><a href="#comment-{{ cell.metadata.nbgrader.grade_id }}">Comment</a></li>
+             {% if not cell.metadata.hide_input %}  <!-- Exclude any cells that have the hide_input flag set (from the hide_input extension) -->
+                {% if cell.metadata.nbgrader and cell.metadata.nbgrader.grade and not cell.metadata.nbgrader.solution %}
+                <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Test cell</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
+                {% elif cell.cell_type == "code" and cell.metadata.nbgrader and cell.metadata.nbgrader.grade %}
+                <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Coding free-response</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
+                {% elif cell.cell_type == "markdown" and cell.metadata.nbgrader and cell.metadata.nbgrader.grade %}
+                <li><a href="#{{ cell.metadata.nbgrader.grade_id }}">Written response</a> (Score: {{ cell.metadata.nbgrader.score | float | round(2) }} / {{ cell.metadata.nbgrader.points | float | round(2) }})</li>
+                {% endif %}
+                {% if cell.metadata.nbgrader and cell.metadata.nbgrader.comment and cell.metadata.nbgrader.comment %}
+                <li><a href="#comment-{{ cell.metadata.nbgrader.grade_id }}">Comment</a></li>
+                {% endif %}
             {% endif %}
           {% endfor %}
           {% if resources.nbgrader.late_penalty > 0 %}
@@ -228,24 +228,25 @@ span.nbgrader-label {
 {% endblock markdowncell %}
 
 {% block input %}
-  {%- if 'nbgrader' in cell.metadata and (cell.metadata.nbgrader.solution or cell.metadata.nbgrader.grade) -%}
-  <div class="panel panel-primary nbgrader_cell">
-    {{ nbgrader_heading(cell) }}
-    <div class="panel-body">
-      <div class="input_area">
-        {{ cell.source | highlight_code(metadata=cell.metadata) }}
-      </div>
+  {%- if not cell.metadata.hide_input -%} <!-- Exclude any cells that have the hide_input flag set (from the hide_input ex) -->
+    {%- if 'nbgrader' in cell.metadata and (cell.metadata.nbgrader.solution or cell.metadata.nbgrader.grade) -%}
+    <div class="panel panel-primary nbgrader_cell">
+        {{ nbgrader_heading(cell) }}
+        <div class="panel-body">
+        <div class="input_area">
+            {{ cell.source | highlight_code(metadata=cell.metadata) }}
+        </div>
+        </div>
+        {{ nbgrader_footer(cell) }}
     </div>
-    {{ nbgrader_footer(cell) }}
-  </div>
 
-  {%- else -%}
+    {%- else -%}
 
-  <div class="inner_cell">
-    <div class="input_area">
-      {{ cell.source | highlight_code(metadata=cell.metadata) }}
+    <div class="inner_cell">
+        <div class="input_area">
+        {{ cell.source | highlight_code(metadata=cell.metadata) }}
+        </div>
     </div>
-  </div>
+    {%- endif -%}
   {%- endif -%}
-
 {% endblock input %}
diff --git a/nbgrader/utils.py b/nbgrader/utils.py
index 4aff2ac9..844e0167 100644
--- a/nbgrader/utils.py
+++ b/nbgrader/utils.py
@@ -111,8 +111,20 @@ def determine_grade(cell, log=None):
         # 3. output is something else, or nothing (full credit).
         for output in cell.outputs:
             # option 1: error, return 0
-            if output.output_type == 'error':
-                return 0, max_points
+            if output.output_type == 'error':    
+                errorFlag = True
+            # Error messages written to stderr are also a sign of a failed test
+            elif output.output_type == 'stream' and output.name == 'stderr':
+                errorFlag = True
+            elif output.output_type == 'stream' and output.name == 'stdout' and output.text[:6] == 'Error:':
+                errorFlag = True
+            if errorFlag:
+               # There may also be tests with zero max points (e.g. to check for correct syntax)
+               # To mark them as failed we need to return -1
+               if max_points == 0:
+                   return -1, 0
+               else:
+                   return 0, max_points
             # if not error, then check for option 2, partial credit
             if output.output_type == 'execute_result':
                 # is there a single result that can be cast to a float?
@@ -218,6 +230,10 @@ def check_directory(path, read=False, write=False, execute=False):
 
 def get_osusername():
     """Get the username of the current process."""
+    try:
+        return os.environ['JUPYTERHUB_USER']
+    except:
+        pass
     if pwd is None:
         raise OSError("get_username cannot be called on Windows")
     return pwd.getpwuid(os.getuid())[0]
diff --git a/nbgrader/validator.py b/nbgrader/validator.py
index fe050d92..fc34b332 100644
--- a/nbgrader/validator.py
+++ b/nbgrader/validator.py
@@ -115,6 +115,10 @@ class Validator(LoggingConfigurable):
             for output in cell.outputs:
                 if output.output_type == "error":
                     errors.append("\n".join(output.traceback))
+                elif output.output_type == "stream" and output.name == 'stderr':
+                    # For some reason using "\n".join(output.text) here leads to each letter being in a new line
+                    # Therefore we already add the "\n" to the error message itself.
+                    errors.append("".join(output.text))
 
             if len(errors) == 0:
                 if utils.is_grade(cell):
@@ -331,7 +335,8 @@ class Validator(LoggingConfigurable):
                 results['failed'] = [{
                     "source": cell.source.strip(),
                     "error": ansi2html(self._extract_error(cell)),
-                    "raw_error": self._extract_error(cell)
+                    "raw_error": self._extract_error(cell),
+                    "hide_input": cell.metadata.get("hide_input", False)
                 } for cell in failed]
 
         return results
